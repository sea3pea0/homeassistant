rest_command:
  side_walkway_trigger:
    url: !secret side_walkway_trigger
  back_walkway_trigger:
    url: !secret back_walkway_trigger
  side_walkway_notify:
    url: !secret side_walkway_notify
  back_walkway_notify:
    url: !secret back_walkway_notify

group:
  walkway_sensors:
    name: Walkway Occupancy
    entities:
      - binary_sensor.side_walkway_occupancy
      - binary_sensor.back_walkway_occupancy

automation:
  - alias: Walkway Motion
    trigger:
      - platform: state
        from: "off"
        to: "on"
        entity_id: group.walkway_sensors
    condition:
      - condition: numeric_state
        entity_id:
          - sensor.side_walkway_illuminance
        below: 50
    action:
      - service: light.turn_on
        target:
          entity_id: light.walkway

  - alias: Walkway No Motion
    trigger:
      - platform: state
        from: "on"
        to: "off"
        entity_id: group.walkway_sensors
    action:
      - service: light.turn_off
        target:
          entity_id: light.walkway

  - alias: Side Walkway Trigger
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.side_walkway_cat_occupancy
          - binary_sensor.side_walkway_dog_occupancy
        from: "off"
        to: "on"
    action:
      service: rest_command.side_walkway_trigger

  - alias: Side Walkway Notify
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.side_walkway_pir
          - binary_sensor.side_walkway_person_occupancy
        from: "off"
        to: "on"
    action:
      service: rest_command.side_walkway_notify

  - alias: Back Walkway Trigger
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.back_walkway_cat_occupancy
          - binary_sensor.back_walkway_dog_occupancy
        from: "off"
        to: "on"
    action:
      service: rest_command.back_walkway_trigger

  - alias: Back Walkway Notify
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.back_walkway_pir
          - binary_sensor.back_walkway_person_occupancy
        from: "off"
        to: "on"
    action:
      service: rest_command.back_walkway_notify

  - alias: "Side Walkway TV Alert"
    mode: single
    trigger:
      platform: mqtt
      topic: frigate/events
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.notify_tv
          state: "on"
        - condition: state
          entity_id: input_boolean.notifications
          state: "on"
        - "{{ trigger.payload_json['type'] == 'new' }}"
        - "{{trigger.payload_json['after']['camera'] == 'side_walkway'}}"
    action:
      - variables:
          event_id: "{{trigger.payload_json['after']['id']}}"
          score: >
            {{(trigger.payload_json['after']['top_score']|float*100)|int}}%
          zone: >
            {% if 'lanai' in trigger.payload_json['after']['entered_zones'] %}
              lanai
            {% elif 'walkway' in trigger.payload_json['after']['entered_zones'] %}
              walkway
            {% elif 'front_driveway' in trigger.payload_json['after']['entered_zones'] %}
              driveway
            {% elif 'culdesac' in trigger.payload_json['after']['entered_zones'] %}
              culdesac
            {% elif 'yard' in trigger.payload_json['after']['entered_zones'] %}
              yard
            {% elif 'street' in trigger.payload_json['after']['entered_zones'] %}
              street
            {% endif %}
          subject: >
            {% if trigger.payload_json['after']['label'] == 'person' %}
              person
            {% elif trigger.payload_json['after']['label'] == 'bus' %}
              bus
            {% elif trigger.payload_json['after']['label'] == 'truck' %}
              truck
            {% elif trigger.payload_json['after']['label'] == 'car' %}
              car
            {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
              bicycle
            {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
              motorcycle
            {% elif trigger.payload_json['after']['label'] == 'dog' %}
              dog
            {% elif trigger.payload_json['after']['label'] == 'cat' %}
              cat
            {% endif %}
          emoji: >
            {% if trigger.payload_json['after']['label'] == 'person' %}
              🏃‍♂️
            {% elif trigger.payload_json['after']['label'] == 'car' %}
              🚗
            {% elif trigger.payload_json['after']['label'] == 'bus'%}
              🚌
            {% elif trigger.payload_json['after']['label'] == 'truck' %}
              🚚
            {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
              🚴
            {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
              🏍
            {% elif trigger.payload_json['after']['label'] == 'dog' %}
              🐕
            {% elif trigger.payload_json['after']['label'] == 'cat' %}
              🐅
            {% endif %}
      - condition: and
        conditions:
          - condition: template
            value_template: >
              {% if is_state("input_boolean.notify_" ~ subject, "on") %}
                true
              {% else %}
                false
              {% endif %}
          - condition: template
            value_template: >
              {% if is_state("input_boolean.notify_" ~ zone, "on") %}
                true
              {% else %}
                false
              {% endif %}
      - service: notify.pea_tv
        data_template:
          title: "Camera Detection"
          message: "{{emoji}} {{subject.replace('_',' ').title()}} ({{score}}) detected in {{zone.replace('_', ' ')}} on Side Walkway Camera"
          data:
            interrupt: 0
            timeout: 100
            image:
              url: !secret frigate_image
            icon:
              url: !secret cctv_icon

  # - alias: "Side Walkway Camera Detection"
  #   mode: parallel
  #   trigger:
  #     platform: mqtt
  #     topic: frigate/events
  #   condition:
  #     condition: and
  #     conditions:
  #       - condition: state
  #         entity_id: input_boolean.notify_telegram
  #         state: "on"
  #       - condition: state
  #         entity_id: input_boolean.notifications
  #         state: "on"
  #       - "{{ trigger.payload_json['type'] == 'new' }}"
  #       - "{{trigger.payload_json['after']['camera'] == 'side_walkway'}}"
  #   action:
  #     - variables:
  #         timestamp: "{{trigger.payload_json['after']['snapshot_time']}}"
  #         event_id: "{{trigger.payload_json['after']['id']}}"
  #         event_url: "https://hass.cmart.tech/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/clip.mp4"
  #         score: >
  #           {{(trigger.payload_json['after']['top_score']|float*100)|int}}%
  #         zone: >
  #           {% if 'lanai' in trigger.payload_json['after']['entered_zones'] %}
  #             lanai
  #           {% elif 'walkway' in trigger.payload_json['after']['entered_zones'] %}
  #             walkway
  #           {% elif 'front_driveway' in trigger.payload_json['after']['entered_zones'] %}
  #             driveway
  #           {% elif 'culdesac' in trigger.payload_json['after']['entered_zones'] %}
  #             culdesac
  #           {% elif 'yard' in trigger.payload_json['after']['entered_zones'] %}
  #             yard
  #           {% elif 'street' in trigger.payload_json['after']['entered_zones'] %}
  #             street
  #           {% endif %}
  #         disable_notify: >
  #           {% if (is_state("input_boolean.notify_" ~ subject, "on") and is_state("input_boolean.notify_" ~ zone, "on")) %}
  #             false
  #           {% else %}
  #             true
  #           {% endif %}
  #         subject: >
  #           {% if trigger.payload_json['after']['label'] == 'person' %}
  #             person
  #           {% elif trigger.payload_json['after']['label'] == 'bus' %}
  #             bus
  #           {% elif trigger.payload_json['after']['label'] == 'truck' %}
  #             truck
  #           {% elif trigger.payload_json['after']['label'] == 'car' %}
  #             car
  #           {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
  #             bicycle
  #           {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
  #             motorcycle
  #           {% elif trigger.payload_json['after']['label'] == 'dog' %}
  #             dog
  #           {% elif trigger.payload_json['after']['label'] == 'cat' %}
  #             cat
  #           {% endif %}
  #         emoji: >
  #           {% if trigger.payload_json['after']['label'] == 'person' %}
  #             🏃‍♂️
  #           {% elif trigger.payload_json['after']['label'] == 'car' %}
  #             🚗
  #           {% elif trigger.payload_json['after']['label'] == 'bus'%}
  #             🚌
  #           {% elif trigger.payload_json['after']['label'] == 'truck' %}
  #             🚚
  #           {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
  #             🚴
  #           {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
  #             🏍
  #           {% elif trigger.payload_json['after']['label'] == 'dog' %}
  #             🐕
  #           {% elif trigger.payload_json['after']['label'] == 'cat' %}
  #             🐅
  #           {% endif %}
  #     # - condition: and
  #     #   conditions:
  #     #     - '{{ is_state("input_boolean.notify_" ~ subject, "on") }}'
  #     #     - '{{ is_state("input_boolean.notify_" ~ zone, "on") }}'
  #     - service: script.turn_on
  #       target:
  #         entity_id: script.side_walkway_msg_id
  #       data:
  #         variables:
  #           event_id: "{{event_id}}"
  #     - service: telegram_bot.send_photo
  #       data_template:
  #         target: !secret group1
  #         url: "http://192.168.1.63:5000/api/events/{{event_id}}/snapshot.jpg?quality=100&crop=1"
  #         caption: "{{emoji}} {{subject.replace('_',' ').title()}} ({{score}}) detected in {{zone.replace('_', ' ')}} on Side Walkway Camera"
  #         timeout: 10000
  #         inline_keyboard:
  #           - "Delete:/delete_msg"
  #         message_tag: "{{event_id}}"
  #         disable_notification: "{{disable_notify}}"
  #     - wait_for_trigger:
  #         - platform: event
  #           event_type: side_walkway_sent
  #           event_data:
  #             event_id: "{{event_id}}"
  #       timeout: "00:03:00"
  #       continue_on_timeout: true
  #     - variables:
  #         msg_id: '{{ wait.trigger.event.data.msg_id }}'
  #     - wait_for_trigger:
  #         - platform: event
  #           event_type: side_walkway_camera_end
  #           event_data:
  #             event_id: "{{event_id}}"
  #       timeout: "00:03:00"
  #       continue_on_timeout: true
  #     - variables:
  #         score: "{{wait.trigger.event.data.score}}"
  #     - service: telegram_bot.edit_caption
  #       data_template:
  #         chat_id: !secret group1
  #         message_id: "{{msg_id}}"
  #         caption: >
  #           {{emoji}} {{subject.replace('_',' ').title()}} ({{wait.trigger.event.data.score}}) detected in {{zone.replace('_', ' ')}} on Side Walkway Camera - Direct Link: {{event_url}}
  #         timeout: 10000
  #         inline_keyboard:
  #           - "Delete:/delete_msg, Video:/get_video {{event_id}} {{timestamp}}, Image:/get_img {{event_id}} {{timestamp}}"

  # - alias: "Side Walkway Camera Message id"
  #   mode: single
  #   trigger:
  #     platform: event
  #     event_type: telegram_sent
  #     event_data:
  #       message_tag: 'side_walkway'
  #   action:
  #     - delay: "00:00:01"
  #     - event: side_walkway_sent
  #       event_data:
  #         msg_id: '{{ trigger.event.data.message_id }}'

  # - alias: "Side Walkway Camera Event End"
  #   mode: parallel
  #   trigger:
  #     platform: mqtt
  #     topic: frigate/events
  #   condition:
  #     - "{{ trigger.payload_json['type'] == 'end' }}"
  #     - '{{ trigger.payload_json["after"]["camera"] == "side_walkway" }}'
  #   action:
  #     - event: side_walkway_camera_end
  #       event_data:
  #         event_id: "{{trigger.payload_json['after']['id']}}"
  #         score: "{{(trigger.payload_json['after']['top_score']|float*100)|int}}%"

  - alias: "Display/Speaker Camera Alert"
    mode: single
    trigger:
      platform: mqtt
      topic: frigate/events
    condition:
      - condition: state
        entity_id: group.people
        state: "home"
      - condition: template
        value_template: '{{is_state("input_boolean.notify_kitchen", "on") or is_state("input_boolean.notify_office", "on") or is_state("input_boolean.notify_master", "on")}}'
      - condition: template
        value_template: '{{not is_state("input_text.current_camera_stream", "side_walkway")}}'
      - condition: state
        entity_id: input_boolean.notify_tts
        state: "on"
      - condition: and
        conditions:
          - "{{ trigger.payload_json['type'] == 'new' }}"
          - "{{trigger.payload_json['after']['camera'] == 'side_walkway'}}"
    action:
      - variables:
          zone: >
            {% if 'lanai' in trigger.payload_json['after']['entered_zones'] %}
              lanai
            {% elif 'walkway' in trigger.payload_json['after']['entered_zones'] %}
              walkway
            {% elif 'front_driveway' in trigger.payload_json['after']['entered_zones'] %}
              driveway
            {% elif 'culdesac' in trigger.payload_json['after']['entered_zones'] %}
              culdesac
            {% elif 'yard' in trigger.payload_json['after']['entered_zones'] %}
              yard
            {% elif 'street' in trigger.payload_json['after']['entered_zones'] %}
              street
            {% endif %}
          subject: >
            {% if trigger.payload_json['after']['label'] == 'person' %}
              person
            {% elif trigger.payload_json['after']['label'] == 'bus' %}
              bus
            {% elif trigger.payload_json['after']['label'] == 'truck' %}
              truck
            {% elif trigger.payload_json['after']['label'] == 'car' %}
              car
            {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
              bicycle
            {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
              motorcycle
            {% elif trigger.payload_json['after']['label'] == 'dog' %}
              dog
            {% elif trigger.payload_json['after']['label'] == 'cat' %}
              cat
            {% endif %}
      - condition: and
        conditions:
          - condition: template
            value_template: >
              {% if is_state("input_boolean.notify_" ~ subject, "on") %}
                true
              {% else %}
                false
              {% endif %}
          - condition: template
            value_template: >
              {% if is_state("input_boolean.notify_" ~ zone, "on") %}
                true
              {% else %}
                false
              {% endif %}
      - service: tts.cloud_say
        data_template:
          entity_id: >
            {% if is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on')%}
              ['media_player.pea_kitchen', 'media_player.pea_office', 'media_player.pea_master']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen', 'media_player.pea_office']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen', 'media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_office', 'media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_office']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen']
            {% endif %}
          message: '{{subject.replace("_"," ").title()}} detected in {{zone.replace("_", " ")}} on {{trigger.payload_json["after"]["camera"].replace("_"," ").title()}} Camera'
      - delay: "00:00:04"
      - service: camera.play_stream
        data_template:
          entity_id: 'camera.{{trigger.payload_json["after"]["camera"]}}'
          media_player: >
            {% if is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on')%}
              ['media_player.pea_kitchen', 'media_player.pea_office', 'media_player.pea_master']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen', 'media_player.pea_office']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen', 'media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_office', 'media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_office']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen']
            {% endif %}
      - service: timer.start
        target:
          entity_id: timer.display_stop
      - service: input_text.set_value
        data_template:
          entity_id: input_text.current_camera_stream
          value: '{{trigger.payload_json["after"]["camera"]}}'

  - alias: Extend Side Walkway Display Camera Stream
    mode: restart
    trigger:
      platform: mqtt
      topic: frigate/events
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: group.people
          state: "home"
        - condition: template
          value_template: '{{is_state("input_boolean.notify_kitchen", "on") or is_state("input_boolean.notify_office", "on") or is_state("input_boolean.notify_master", "on")}}'
        - condition: template
          value_template: '{{is_state("input_text.current_camera_stream", "side_walkway")}}'
        - condition: and
          conditions:
            - "{{trigger.payload_json['after']['camera'] == 'side_walkway'}}"
    action:
      - service: timer.start
        target:
          entity_id: timer.display_stop
  # script:
  #   side_walkway_msg_id:
  #     alias: Side Walkway Message ID
  #     mode: parallel
  #     sequence:
  #       - wait_for_trigger:
  #         - platform: event
  #           event_type: telegram_sent
  #           event_data:
  #             message_tag: "{{event_id}}"
  #       - delay: "00:00:02"
  #       - event: side_walkway_sent
  #         event_data:
  #           event_id: "{{event_id}}"
  #           msg_id: "{{ wait.trigger.event.data.message_id }}"

  - alias: "Back Walkway TV Alert"
    mode: single
    trigger:
      platform: mqtt
      topic: frigate/events
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.notify_tv
          state: "on"
        - condition: state
          entity_id: input_boolean.notifications
          state: "on"
        - "{{ trigger.payload_json['type'] == 'new' }}"
        - "{{trigger.payload_json['after']['camera'] == 'back_walkway'}}"
    action:
      - variables:
          event_id: "{{trigger.payload_json['after']['id']}}"
          score: >
            {{(trigger.payload_json['after']['top_score']|float*100)|int}}%
          zone: >
            {% if 'lanai' in trigger.payload_json['after']['entered_zones'] %}
              lanai
            {% elif 'walkway' in trigger.payload_json['after']['entered_zones'] %}
              walkway
            {% elif 'front_driveway' in trigger.payload_json['after']['entered_zones'] %}
              driveway
            {% elif 'culdesac' in trigger.payload_json['after']['entered_zones'] %}
              culdesac
            {% elif 'yard' in trigger.payload_json['after']['entered_zones'] %}
              yard
            {% elif 'street' in trigger.payload_json['after']['entered_zones'] %}
              street
            {% endif %}
          subject: >
            {% if trigger.payload_json['after']['label'] == 'person' %}
              person
            {% elif trigger.payload_json['after']['label'] == 'bus' %}
              bus
            {% elif trigger.payload_json['after']['label'] == 'truck' %}
              truck
            {% elif trigger.payload_json['after']['label'] == 'car' %}
              car
            {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
              bicycle
            {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
              motorcycle
            {% elif trigger.payload_json['after']['label'] == 'dog' %}
              dog
            {% elif trigger.payload_json['after']['label'] == 'cat' %}
              cat
            {% endif %}
          emoji: >
            {% if trigger.payload_json['after']['label'] == 'person' %}
              🏃‍♂️
            {% elif trigger.payload_json['after']['label'] == 'car' %}
              🚗
            {% elif trigger.payload_json['after']['label'] == 'bus'%}
              🚌
            {% elif trigger.payload_json['after']['label'] == 'truck' %}
              🚚
            {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
              🚴
            {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
              🏍
            {% elif trigger.payload_json['after']['label'] == 'dog' %}
              🐕
            {% elif trigger.payload_json['after']['label'] == 'cat' %}
              🐅
            {% endif %}
      - condition: and
        conditions:
          - condition: template
            value_template: >
              {% if is_state("input_boolean.notify_" ~ subject, "on") %}
                true
              {% else %}
                false
              {% endif %}
          - condition: template
            value_template: >
              {% if is_state("input_boolean.notify_" ~ zone, "on") %}
                true
              {% else %}
                false
              {% endif %}
      - service: notify.pea_tv
        data_template:
          title: "Camera Detection"
          message: "{{emoji}} {{subject.replace('_',' ').title()}} ({{score}}) detected in {{zone.replace('_', ' ')}} on Back Walkway Camera"
          data:
            interrupt: 0
            timeout: 100
            image:
              url: !secret frigate_image
            icon:
              url: !secret cctv_icon

  # - alias: "Back Walkway Camera Detection"
  #   mode: parallel
  #   trigger:
  #     platform: mqtt
  #     topic: frigate/events
  #   condition:
  #     condition: and
  #     conditions:
  #       - condition: state
  #         entity_id: input_boolean.notify_telegram
  #         state: "on"
  #       - condition: state
  #         entity_id: input_boolean.notifications
  #         state: "on"
  #       - "{{ trigger.payload_json['type'] == 'new' }}"
  #       - "{{trigger.payload_json['after']['camera'] == 'back_walkway'}}"
  #   action:
  #     - variables:
  #         timestamp: "{{trigger.payload_json['after']['snapshot_time']}}"
  #         event_id: "{{trigger.payload_json['after']['id']}}"
  #         event_url: "https://hass.cmart.tech/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/clip.mp4"
  #         score: >
  #           {{(trigger.payload_json['after']['top_score']|float*100)|int}}%
  #         zone: >
  #           {% if 'lanai' in trigger.payload_json['after']['entered_zones'] %}
  #             lanai
  #           {% elif 'walkway' in trigger.payload_json['after']['entered_zones'] %}
  #             walkway
  #           {% elif 'front_driveway' in trigger.payload_json['after']['entered_zones'] %}
  #             driveway
  #           {% elif 'culdesac' in trigger.payload_json['after']['entered_zones'] %}
  #             culdesac
  #           {% elif 'yard' in trigger.payload_json['after']['entered_zones'] %}
  #             yard
  #           {% elif 'street' in trigger.payload_json['after']['entered_zones'] %}
  #             street
  #           {% endif %}
  #         disable_notify: >
  #           {% if (is_state("input_boolean.notify_" ~ subject, "on") and is_state("input_boolean.notify_" ~ zone, "on")) %}
  #             false
  #           {% else %}
  #             true
  #           {% endif %}
  #         subject: >
  #           {% if trigger.payload_json['after']['label'] == 'person' %}
  #             person
  #           {% elif trigger.payload_json['after']['label'] == 'bus' %}
  #             bus
  #           {% elif trigger.payload_json['after']['label'] == 'truck' %}
  #             truck
  #           {% elif trigger.payload_json['after']['label'] == 'car' %}
  #             car
  #           {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
  #             bicycle
  #           {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
  #             motorcycle
  #           {% elif trigger.payload_json['after']['label'] == 'dog' %}
  #             dog
  #           {% elif trigger.payload_json['after']['label'] == 'cat' %}
  #             cat
  #           {% endif %}
  #         emoji: >
  #           {% if trigger.payload_json['after']['label'] == 'person' %}
  #             🏃‍♂️
  #           {% elif trigger.payload_json['after']['label'] == 'car' %}
  #             🚗
  #           {% elif trigger.payload_json['after']['label'] == 'bus'%}
  #             🚌
  #           {% elif trigger.payload_json['after']['label'] == 'truck' %}
  #             🚚
  #           {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
  #             🚴
  #           {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
  #             🏍
  #           {% elif trigger.payload_json['after']['label'] == 'dog' %}
  #             🐕
  #           {% elif trigger.payload_json['after']['label'] == 'cat' %}
  #             🐅
  #           {% endif %}
  #     # - condition: and
  #     #   conditions:
  #     #     - '{{ is_state("input_boolean.notify_" ~ subject, "on") }}'
  #     #     - '{{ is_state("input_boolean.notify_" ~ zone, "on") }}'
  #     - service: script.turn_on
  #       target:
  #         entity_id: script.back_walkway_msg_id
  #       data:
  #         variables:
  #           event_id: "{{event_id}}"
  #     - service: telegram_bot.send_photo
  #       data_template:
  #         target: !secret group1
  #         url: "http://192.168.1.63:5000/api/events/{{event_id}}/snapshot.jpg?quality=100&crop=1"
  #         caption: "{{emoji}} {{subject.replace('_',' ').title()}} ({{score}}) detected in {{zone.replace('_', ' ')}} on Back Walkway Camera"
  #         timeout: 10000
  #         inline_keyboard:
  #           - "Delete:/delete_msg"
  #         message_tag: "{{event_id}}"
  #     - wait_for_trigger:
  #         - platform: event
  #           event_type: back_walkway_sent
  #           event_data:
  #             event_id: "{{event_id}}"
  #       timeout: "00:03:00"
  #       continue_on_timeout: true
  #     - variables:
  #         msg_id: "{{ wait.trigger.event.data.msg_id }}"
  #     - wait_for_trigger:
  #         - platform: event
  #           event_type: back_walkway_camera_end
  #           event_data:
  #             event_id: "{{event_id}}"
  #       timeout: "00:03:00"
  #       continue_on_timeout: true
  #     - variables:
  #         score: "{{wait.trigger.event.data.score}}"
  #     - service: telegram_bot.edit_caption
  #       data_template:
  #         chat_id: !secret group1
  #         message_id: "{{msg_id}}"
  #         caption: >
  #           {{emoji}} {{subject.replace('_',' ').title()}} ({{score}}) detected in {{zone.replace('_', ' ')}} on Back Walkway Camera - Direct Link: {{event_url}}
  #         timeout: 10000
  #         inline_keyboard:
  #           - "Delete:/delete_msg, Video:/get_video {{event_id}} {{timestamp}}, Image:/get_img {{event_id}} {{timestamp}}"

  # - alias: "Back Walkway Camera Message id"
  #   mode: single
  #   trigger:
  #     platform: event
  #     event_type: telegram_sent
  #     event_data:
  #       message_tag: 'back_walkway'
  #   action:
  #     - delay: "00:00:01"
  #     - event: back_walkway_sent
  #       event_data:
  #         msg_id: '{{ trigger.event.data.message_id }}'

  # - alias: "Back Walkway Camera Event End"
  #   mode: parallel
  #   trigger:
  #     platform: mqtt
  #     topic: frigate/events
  #   condition:
  #     - "{{ trigger.payload_json['type'] == 'end' }}"
  #     - "{{ trigger.payload_json['after']['camera'] == 'back_walkway' }}"
  #   action:
  #     - event: back_walkway_camera_end
  #       event_data:
  #         event_id: "{{trigger.payload_json['after']['id']}}"
  #         score: "{{(trigger.payload_json['after']['top_score']|float*100)|int}}%"

  - alias: "Display/Speaker Camera Alert"
    mode: single
    trigger:
      platform: mqtt
      topic: frigate/events
    condition:
      - condition: state
        entity_id: group.people
        state: "home"
      - condition: template
        value_template: '{{is_state("input_boolean.notify_kitchen", "on") or is_state("input_boolean.notify_office", "on") or is_state("input_boolean.notify_master", "on")}}'
      - condition: template
        value_template: '{{not is_state("input_text.current_camera_stream", "back_walkway")}}'
      - condition: state
        entity_id: input_boolean.notify_tts
        state: "on"
      - condition: and
        conditions:
          - "{{ trigger.payload_json['type'] == 'new' }}"
          - "{{trigger.payload_json['after']['camera'] == 'back_walkway'}}"
    action:
      - variables:
          zone: >
            {% if 'lanai' in trigger.payload_json['after']['entered_zones'] %}
              lanai
            {% elif 'walkway' in trigger.payload_json['after']['entered_zones'] %}
              walkway
            {% elif 'front_driveway' in trigger.payload_json['after']['entered_zones'] %}
              driveway
            {% elif 'culdesac' in trigger.payload_json['after']['entered_zones'] %}
              culdesac
            {% elif 'yard' in trigger.payload_json['after']['entered_zones'] %}
              yard
            {% elif 'street' in trigger.payload_json['after']['entered_zones'] %}
              street
            {% endif %}
          subject: >
            {% if trigger.payload_json['after']['label'] == 'person' %}
              person
            {% elif trigger.payload_json['after']['label'] == 'bus' %}
              bus
            {% elif trigger.payload_json['after']['label'] == 'truck' %}
              truck
            {% elif trigger.payload_json['after']['label'] == 'car' %}
              car
            {% elif trigger.payload_json['after']['label'] == 'bicycle' %}
              bicycle
            {% elif trigger.payload_json['after']['label'] == 'motorcycle' %}
              motorcycle
            {% elif trigger.payload_json['after']['label'] == 'dog' %}
              dog
            {% elif trigger.payload_json['after']['label'] == 'cat' %}
              cat
            {% endif %}
      - condition: and
        conditions:
          - condition: template
            value_template: >
              {% if is_state("input_boolean.notify_" ~ subject, "on") %}
                true
              {% else %}
                false
              {% endif %}
          - condition: template
            value_template: >
              {% if is_state("input_boolean.notify_" ~ zone, "on") %}
                true
              {% else %}
                false
              {% endif %}
      - service: tts.cloud_say
        data_template:
          entity_id: >
            {% if is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on')%}
              ['media_player.pea_kitchen', 'media_player.pea_office', 'media_player.pea_master']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen', 'media_player.pea_office']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen', 'media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_office', 'media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_office']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen']
            {% endif %}
          message: '{{subject.replace("_"," ").title()}} detected in {{zone.replace("_", " ")}} on {{trigger.payload_json["after"]["camera"].replace("_"," ").title()}} Camera'
      - delay: "00:00:04"
      - service: camera.play_stream
        data_template:
          entity_id: 'camera.{{trigger.payload_json["after"]["camera"]}}'
          media_player: >
            {% if is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on')%}
              ['media_player.pea_kitchen', 'media_player.pea_office', 'media_player.pea_master']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen', 'media_player.pea_office']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen', 'media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_office', 'media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_master']
            {% elif not is_state('input_boolean.notify_kitchen', 'on') and is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_office']
            {% elif is_state('input_boolean.notify_kitchen', 'on') and not is_state('input_boolean.notify_office', 'on') and not is_state('input_boolean.notify_master', 'on') %}
              ['media_player.pea_kitchen']
            {% endif %}
      - service: timer.start
        target:
          entity_id: timer.display_stop
      - service: input_text.set_value
        data_template:
          entity_id: input_text.current_camera_stream
          value: '{{trigger.payload_json["after"]["camera"]}}'

  - alias: Extend Back Walkway Display Camera Stream
    mode: restart
    trigger:
      platform: mqtt
      topic: frigate/events
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: group.people
          state: "home"
        - condition: template
          value_template: '{{is_state("input_boolean.notify_kitchen", "on") or is_state("input_boolean.notify_office", "on") or is_state("input_boolean.notify_master", "on")}}'
        - condition: template
          value_template: '{{is_state("input_text.current_camera_stream", "back_walkway")}}'
        - condition: and
          conditions:
            - "{{trigger.payload_json['after']['camera'] == 'back_walkway'}}"
    action:
      - service: timer.start
        target:
          entity_id: timer.display_stop
# script:
#   back_walkway_msg_id:
#     alias: Back Walkway Message ID
#     mode: parallel
#     sequence:
#       - wait_for_trigger:
#         - platform: event
#           event_type: telegram_sent
#           event_data:
#             message_tag: "{{event_id}}"
#       - delay: "00:00:02"
#       - event: back_walkway_sent
#         event_data:
#           event_id: "{{event_id}}"
#           msg_id: "{{ wait.trigger.event.data.message_id }}"
